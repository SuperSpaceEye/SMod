repositories {
    mavenLocal()
    maven {
        url = "https://repo.essential.gg/repository/maven-public"
    }
    mavenCentral()
}

dependencies {
    modCompileOnly(files("jars/VMod-Fabric-1.20.1-1.7.1.jar"))
    modImplementation("net.spaceeye:valkyrien-ship-schematics-$project.minecraft_version-$project.name:$project.vss_version") {transitive false}

    api 'org.joml:joml-primitives:1.10.0'
    api 'org.joml:joml:1.10.4'
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"

    modApi("org.valkyrienskies:valkyrienskies-120-common:${project.vs2_version}")
    compileOnly("org.valkyrienskies.core:api:${project.vs_core_version}")
    compileOnly("org.valkyrienskies.core:api-game:${project.vs_core_version}")
    compileOnly("org.valkyrienskies.core:util:${project.vs_core_version}")
    compileOnly("org.valkyrienskies.core:impl:${project.vs_core_version}")

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.21"
    api "org.jetbrains.kotlin:kotlin-reflect:1.7.21"

    compileOnly("gg.essential:elementa:${rootProject.elementaVersion}")
    modImplementation(include("gg.essential:universalcraft-1.20.1-fabric:${rootProject.ucVersion}"))

    modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
}

//Renames .kotlin_module of common so that it's not overwrited during forge/fabric compilation
compileKotlin { doLast {
    file(compileKotlin.destinationDirectory.get().toString() + "/META-INF/SMod.kotlin_module").renameTo(file(compileKotlin.destinationDirectory.get().toString() + "/META-INF/SMod_common.kotlin_module"))
} }

architectury {
    common("fabric", "forge")
}