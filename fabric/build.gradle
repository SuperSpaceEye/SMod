plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://repo.essential.gg/repository/maven-public"
    }
    mavenCentral()
}

dependencies {
    modRuntimeOnly(files("jars/VMod-Fabric-1.20.1-1.7.1.jar"))

    runtimeOnly(("gg.essential:elementa:${rootProject.elementaVersion}")) {transitive false}
    modRuntimeOnly("gg.essential:universalcraft-1.20.1-fabric:${rootProject.ucVersion}") {transitive false}
    modRuntimeOnly("net.spaceeye:valkyrien-ship-schematics-$project.minecraft_version-$project.name:$project.vss_version") {transitive false}
    runtimeOnly("org.jgrapht:jgrapht-core:1.5.2") {transitive false}

    implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.3.5-beta.2"))

    api 'org.joml:joml-primitives:1.10.0'
    api 'org.joml:joml:1.10.4'

    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modApi("org.valkyrienskies:valkyrienskies-120-fabric:${project.vs2_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:api:${project.vs_core_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:api-game:${project.vs_core_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:util:${project.vs_core_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:impl:${project.vs_core_version}") { transitive = false }

    // Kotlin
    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10") { transitive = false }
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.0"
    api "org.jetbrains.kotlin:kotlin-reflect:2.1.0"

    implementation 'com.electronwill.night-config:core:3.6.3'
    implementation 'com.electronwill.night-config:toml:3.6.3'
    modApi("curse.maven:forge-config-api-port-fabric-547434:4583000") { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    archiveBaseName.set("${archiveBaseName.get()}-Fabric-${minecraft_version}")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}